PyramidLayers-金字塔砖块求解
金字塔顶端一个砖块，向下依次为2^2,3^2,...,n^2，现给N个砖块，求解可以垒成的金字塔的层数
利用1^2+2^2+3^2+...+n^2=n(n+1)(2n+1)/6

S =
N ≤ 0
⟹ result = 0
∨
N > 0
⟹ result * (result + 1) * (2 * result + 1) / 6 ≤ N ∧ (result + 1) * (result + 2) * (2 * result + 3) / 6 > N



T1: N ≤ 0
D1: result = 0

T2: N > 0
D2: (result * (result + 1) * (2 * result + 1))/6 ≤ N
∧ ((result + 1) * (result + 2) * (2 * (result + 1) + 3))/6 > N






规范
(N)>0
((result) * ((result) + 1) * (2 * (result) + 1))/6 <= (N) && (((result) + 1) * ((result) + 2) * (2 * ((result) + 1) + 3))/6 > (N)




添加print之后的语句
public class UserInputProgram {
public static int maxPyramidLayers(int N){
// 如果 N 小于等于 0，直接返回 0
if(N <= 0){
System.out.println("Evaluating if condition: N <= 0 is evaluated as: " + (N <= 0));
return 0;
}
int result = 0;
System.out.println("result = 0, current value of result: " + result);
boolean breakEncountered = true;
while(true){
System.out.println("Entering loop with condition: true is evaluated as: " + (true));
// 计算当前层数的砖块需求
int currentBricks = (result * (result + 1) * (2 * result + 1)) / 6;
System.out.println("currentBricks = (result * (result + 1) * (2 * result + 1)) / 6, current value of currentBricks: " + currentBricks);
// 计算下一层的砖块需求
int nextBricks = ((result + 1) * (result + 2) * (2 * result + 3)) / 6;
System.out.println("nextBricks = ((result + 1) * (result + 2) * (2 * result + 3)) / 6, current value of nextBricks: " + nextBricks);
// 检查当前砖块需求是否在范围内
if(currentBricks <= N && N < nextBricks){
System.out.println("Evaluating if condition: currentBricks <= N && N < nextBricks is evaluated as: " + (currentBricks <= N && N < nextBricks));
break;
}
if (breakEncountered) {
    System.out.println("Exiting loop, condition no longer holds: true is evaluated as: " + (true));
}
// 增加层数
result=result+1;
System.out.println("result = result+1, current value of result: " + result);
}
return result;
}
public static void main(String[] args){
Scanner scanner = new Scanner(System.in);
int N = scanner.nextInt();; // 你可以修改这个值来测试不同的输入
int sum = maxPyramidLayers(N);
System.out.println("sum = maxPyramidLayers(N), current value of result: " + sum);
System.out.println("可以构建的金字塔层数: " +sum);
}
}